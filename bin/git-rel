#!/usr/bin/env ruby

# git-rel - Prints the release in which a commit was first included, if any.
#
# Usage:
# 
#   git rel <SHA1>
#
# Examples:
#
#   $ git rel c01b20b
#   released in v4.2.0.rc1
#
#   $ git rel 254e8e2
#   released in v4.1.1
#
#   $ git rel HEAD
#   not yet released
#
# As a simple way to detect backports, the script also looks for commits in
# any branch that have the same message (first line), with a committer date
# within a two month window.
#
#   $ git rel c7ac0a5
#   released in v4.1.0.beta1
#   possible backport in v4.0.1.rc1 as 8a099f1
#
# This does not pretend to be correct, I am aware of no way to detect backports
# correctly, but it's going to be useful in practice anyway.
#
# Assumes that each release has a tag, and each tag represents a release.

def release_for(sha1)
  release = `git describe --contains #{sha1} 2>/dev/null`.chomp.sub(/~.*/, '')
  release.empty? ? nil : release
end

SECONDS_IN_ONE_MONTH = 3600*24*30
def backports(sha1)
  message = `git show --format=%s -q #{sha1}`.chomp
  epoch   = `git show --format=%ct -q #{sha1}`.chomp.to_i

  after  = epoch - SECONDS_IN_ONE_MONTH
  before = epoch + SECONDS_IN_ONE_MONTH

  IO.popen("git log --all --format='%H %s' --after=#{after} --before=#{before}") do |io|
    io.each_line do |line|
      other_sha1, other_message = line.chomp.split(' ', 2)
      if message == other_message && other_sha1 != sha1
        yield other_sha1
      end
    end
  end
end

sha1 = ARGV[0]
if !sha1
  $stderr.puts("Usage: git rel <SHA1>")
  exit 1
end

sha1 = `git rev-parse #{sha1}`.chomp
if release = release_for(sha1)
  puts "released in #{release}"
else
  puts "not yet released"
end

backports(sha1) do |backport|
  if release = release_for(backport)
    puts "possible backport in #{release} as #{backport[0..6]}"
  else
    puts "possible backport as #{backport[0..6]} (not yet released)"
  end
end
